"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var imgs_1 = require("../../utils/imgs");
var util_1 = require("../../utils/util");
Page({
    data: {
        array: [],
        index: 0,
        imgUrl: '',
        numstr: '',
    },
    onLoad: function () {
        var arr = [];
        for (var i = 1; i <= 100; i++) {
            arr.push(util_1.genNumStr(i));
        }
        this.setData({
            array: arr,
            imgUrl: imgs_1.genImgUrl(this.data.index + 1),
            numstr: util_1.genNumStr(this.data.index + 1)
        });
    },
    next: function () {
        this.data.index++;
        this.setData({
            index: util_1.transNum(this.data.index),
            imgUrl: imgs_1.genImgUrl(this.data.index + 1),
            numstr: util_1.genNumStr(this.data.index + 1)
        });
    },
    prev: function () {
        this.data.index--;
        this.setData({
            index: util_1.transNum(this.data.index),
            imgUrl: imgs_1.genImgUrl(this.data.index + 1),
            numstr: util_1.genNumStr(this.data.index + 1)
        });
    },
    bindPickerChange: function (e) {
        this.setData({
            index: parseInt(e.detail.value),
            imgUrl: imgs_1.genImgUrl(parseInt(e.detail.value) + 1),
            numstr: util_1.genNumStr(parseInt(e.detail.value) + 1)
        });
    },
    search: function (e) {
        this.setData({
            index: util_1.transNum(parseInt(e.detail.value ? e.detail.value : 1) - 1),
            imgUrl: imgs_1.genImgUrl(parseInt(e.detail.value ? e.detail.value : 1)),
            numstr: util_1.genNumStr(parseInt(e.detail.value ? e.detail.value : 1))
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlDQUE2QztBQUM3Qyx5Q0FBdUQ7QUFFdkQsSUFBSSxDQUFDO0lBRUgsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFFLEVBQWM7UUFDckIsS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLEVBQUUsRUFBRTtRQUNWLE1BQU0sRUFBRSxFQUFFO0tBQ1g7SUFFRCxNQUFNO1FBRUosSUFBTSxHQUFHLEdBQUcsRUFBYyxDQUFDO1FBQzNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEI7UUFDRCxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxFQUFFLGdCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osS0FBSyxFQUFFLGVBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNoQyxNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxFQUFFLGdCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osS0FBSyxFQUFFLGVBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNoQyxNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxFQUFFLGdCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxnQkFBZ0IsWUFBQyxDQUFNO1FBRXJCLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQy9CLE1BQU0sRUFBRSxnQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQyxNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEQsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELE1BQU0sWUFBQyxDQUFNO1FBQ1gsSUFBSSxDQUFDLE9BQVEsQ0FBQztZQUNaLEtBQUssRUFBRSxlQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sRUFBRSxnQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sRUFBRSxnQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pFLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FtQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFnZXMvdHJhaW4vdHJhaW4uanNcbmltcG9ydCB7IGdlbkltZ1VybCB9IGZyb20gJy4uLy4uL3V0aWxzL2ltZ3MnO1xuaW1wb3J0IHsgdHJhbnNOdW0sIGdlbk51bVN0ciB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5QYWdlKHtcbiAgLy8g6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gIGRhdGE6IHtcbiAgICBhcnJheTogW10gYXMgc3RyaW5nW10sXG4gICAgaW5kZXg6IDAsXG4gICAgaW1nVXJsOiAnJyxcbiAgICBudW1zdHI6ICcnLFxuICB9LFxuICAvLyDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxuICBvbkxvYWQoKSB7XG4gICAgLy8g55Sf5Lqn6ZW/5bqm5Li6IDEwMCDnmoTmlbDnu4RcbiAgICBjb25zdCBhcnIgPSBbXSBhcyBzdHJpbmdbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMDA7IGkrKykge1xuICAgICAgYXJyLnB1c2goZ2VuTnVtU3RyKGkpKTtcbiAgICB9XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBhcnJheTogYXJyLFxuICAgICAgaW1nVXJsOiBnZW5JbWdVcmwodGhpcy5kYXRhLmluZGV4ICsgMSksXG4gICAgICBudW1zdHI6IGdlbk51bVN0cih0aGlzLmRhdGEuaW5kZXggKyAxKVxuICAgIH0pO1xuICB9LFxuICAvLyDkuIvkuIDkuKrmlbDlrZdcbiAgbmV4dCgpIHtcbiAgICB0aGlzLmRhdGEuaW5kZXgrKztcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIGluZGV4OiB0cmFuc051bSh0aGlzLmRhdGEuaW5kZXgpLFxuICAgICAgaW1nVXJsOiBnZW5JbWdVcmwodGhpcy5kYXRhLmluZGV4ICsgMSksXG4gICAgICBudW1zdHI6IGdlbk51bVN0cih0aGlzLmRhdGEuaW5kZXggKyAxKVxuICAgIH0pO1xuICB9LFxuICAvLyDkuIrkuIDkuKrmlbDlrZdcbiAgcHJldigpIHtcbiAgICB0aGlzLmRhdGEuaW5kZXgtLTtcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIGluZGV4OiB0cmFuc051bSh0aGlzLmRhdGEuaW5kZXgpLFxuICAgICAgaW1nVXJsOiBnZW5JbWdVcmwodGhpcy5kYXRhLmluZGV4ICsgMSksXG4gICAgICBudW1zdHI6IGdlbk51bVN0cih0aGlzLmRhdGEuaW5kZXggKyAxKVxuICAgIH0pO1xuICB9LFxuICBiaW5kUGlja2VyQ2hhbmdlKGU6IGFueSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdwaWNrZXLlj5HpgIHpgInmi6nmlLnlj5jvvIzmkLrluKblgLzkuLonLCBlLmRldGFpbC52YWx1ZSlcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIGluZGV4OiBwYXJzZUludChlLmRldGFpbC52YWx1ZSksXG4gICAgICBpbWdVcmw6IGdlbkltZ1VybChwYXJzZUludChlLmRldGFpbC52YWx1ZSkgKyAxKSxcbiAgICAgIG51bXN0cjogZ2VuTnVtU3RyKHBhcnNlSW50KGUuZGV0YWlsLnZhbHVlKSArIDEpXG4gICAgfSlcbiAgfSxcbiAgLy8g5p+l5om+XG4gIHNlYXJjaChlOiBhbnkpIHtcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIGluZGV4OiB0cmFuc051bShwYXJzZUludChlLmRldGFpbC52YWx1ZSA/IGUuZGV0YWlsLnZhbHVlIDogMSkgLSAxKSxcbiAgICAgIGltZ1VybDogZ2VuSW1nVXJsKHBhcnNlSW50KGUuZGV0YWlsLnZhbHVlID8gZS5kZXRhaWwudmFsdWUgOiAxKSksXG4gICAgICBudW1zdHI6IGdlbk51bVN0cihwYXJzZUludChlLmRldGFpbC52YWx1ZSA/IGUuZGV0YWlsLnZhbHVlIDogMSkpXG4gICAgfSlcbiAgfVxuICAvL+eUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yid5qyh5riy5p+T5a6M5oiQXG4gIC8vIG9uUmVhZHkoKSB7XG5cbiAgLy8gfSxcblxuICAvLyDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAvLyBvblNob3coKSB7XG5cbiAgLy8gfSxcblxuICAvLyDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdoumakOiXj1xuICAvLyBvbkhpZGUoKSB7XG5cbiAgLy8gfSxcblxuICAvLyDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxuICAvLyBvblVubG9hZCgpIHtcblxuICAvLyB9LFxuXG4gIC8vIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gIC8vIG9uUHVsbERvd25SZWZyZXNoKCkge1xuXG4gIC8vIH0sXG5cbiAgLy8g6aG16Z2i5LiK5ouJ6Kem5bqV5LqL5Lu255qE5aSE55CG5Ye95pWwXG4gIC8vIG9uUmVhY2hCb3R0b20oKSB7XG5cbiAgLy8gfSxcblxuICAvLyDnlKjmiLfngrnlh7vlj7PkuIrop5LliIbkuqtcbiAgLy8gb25TaGFyZUFwcE1lc3NhZ2UoKSB7XG5cbiAgLy8gfVxufSkiXX0=