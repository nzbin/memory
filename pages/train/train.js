"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var imgs_1 = require("../../utils/imgs");
var util_1 = require("../../utils/util");
var dict_1 = require("../../data/dict");
Page({
    data: {
        array: [],
        index: 0,
        imgUrl: '',
        numstr: '',
        searchIndex: 1,
        numtext: '',
    },
    onLoad: function () {
        var arr = [];
        for (var i = 1; i <= 100; i++) {
            arr.push(util_1.genNumStr(i));
        }
        this.setData({
            array: arr,
            imgUrl: imgs_1.genImgUrl(this.data.index + 1),
            numstr: util_1.genNumStr(this.data.index + 1),
            numtext: dict_1.dict[arr[0]]
        });
    },
    next: function () {
        this.data.index++;
        this.data.searchIndex++;
        this.setData({
            index: util_1.transNum(this.data.index),
            imgUrl: imgs_1.genImgUrl(this.data.index + 1),
            numstr: util_1.genNumStr(this.data.index + 1),
            numtext: dict_1.dict[this.data.array[util_1.transNum(this.data.index)]],
            searchIndex: util_1.transNum(this.data.searchIndex),
        });
    },
    prev: function () {
        this.data.index--;
        this.data.searchIndex--;
        this.setData({
            index: util_1.transNum(this.data.index),
            imgUrl: imgs_1.genImgUrl(this.data.index + 1),
            numstr: util_1.genNumStr(this.data.index + 1),
            numtext: dict_1.dict[this.data.array[util_1.transNum(this.data.index)]],
            searchIndex: util_1.transNum(this.data.searchIndex),
        });
    },
    bindPickerChange: function (e) {
        var value = parseInt(e.detail.value);
        this.setData({
            index: value,
            imgUrl: imgs_1.genImgUrl(value + 1),
            numstr: util_1.genNumStr(value + 1),
            numtext: dict_1.dict[this.data.array[value]],
            searchIndex: value + 1,
        });
    },
    search: function (e) {
        var value = parseInt(e.detail.value ? e.detail.value : 1);
        this.setData({
            index: util_1.transNum(value - 1),
            imgUrl: imgs_1.genImgUrl(value),
            numstr: util_1.genNumStr(value),
            numtext: dict_1.dict[this.data.array[util_1.transNum(value - 1)]],
            searchIndex: value,
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlDQUE2QztBQUM3Qyx5Q0FBdUQ7QUFDdkQsd0NBQXVDO0FBRXZDLElBQUksQ0FBQztJQUVILElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxFQUFjO1FBQ3JCLEtBQUssRUFBRSxDQUFDO1FBQ1IsTUFBTSxFQUFFLEVBQUU7UUFDVixNQUFNLEVBQUUsRUFBRTtRQUNWLFdBQVcsRUFBRSxDQUFDO1FBQ2QsT0FBTyxFQUFFLEVBQUU7S0FDWjtJQUVELE1BQU07UUFFSixJQUFNLEdBQUcsR0FBRyxFQUFjLENBQUM7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QixHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxnQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUN0QyxNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDdEMsT0FBTyxFQUFFLFdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQVEsQ0FBQztZQUNaLEtBQUssRUFBRSxlQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDaEMsTUFBTSxFQUFFLGdCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sRUFBRSxnQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUN0QyxPQUFPLEVBQUUsV0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDekQsV0FBVyxFQUFFLGVBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUM3QyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osS0FBSyxFQUFFLGVBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNoQyxNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxFQUFFLGdCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE9BQU8sRUFBRSxXQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RCxXQUFXLEVBQUUsZUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQzdDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxnQkFBZ0IsWUFBQyxDQUFNO1FBQ3JCLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixLQUFLLEVBQUUsS0FBSztZQUNaLE1BQU0sRUFBRSxnQkFBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDNUIsTUFBTSxFQUFFLGdCQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUM1QixPQUFPLEVBQUUsV0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JDLFdBQVcsRUFBRSxLQUFLLEdBQUcsQ0FBQztTQUN2QixDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsTUFBTSxZQUFDLENBQU07UUFDWCxJQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osS0FBSyxFQUFFLGVBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sRUFBRSxnQkFBUyxDQUFDLEtBQUssQ0FBQztZQUN4QixNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxLQUFLLENBQUM7WUFDeEIsT0FBTyxFQUFFLFdBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkQsV0FBVyxFQUFFLEtBQUs7U0FDbkIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQW1DRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWdlcy90cmFpbi90cmFpbi5qc1xuaW1wb3J0IHsgZ2VuSW1nVXJsIH0gZnJvbSAnLi4vLi4vdXRpbHMvaW1ncyc7XG5pbXBvcnQgeyB0cmFuc051bSwgZ2VuTnVtU3RyIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBkaWN0IH0gZnJvbSAnLi4vLi4vZGF0YS9kaWN0JztcblxuUGFnZSh7XG4gIC8vIOmhtemdoueahOWIneWni+aVsOaNrlxuICBkYXRhOiB7XG4gICAgYXJyYXk6IFtdIGFzIHN0cmluZ1tdLFxuICAgIGluZGV4OiAwLCAvLyDmlbDnu4TntKLlvJVcbiAgICBpbWdVcmw6ICcnLFxuICAgIG51bXN0cjogJycsXG4gICAgc2VhcmNoSW5kZXg6IDEsIC8vIOaQnOe0oue0ouW8lVxuICAgIG51bXRleHQ6ICcnLCAvLyDmlbDlrZfmlofmoYhcbiAgfSxcbiAgLy8g55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliqDovb1cbiAgb25Mb2FkKCkge1xuICAgIC8vIOeUn+S6p+mVv+W6puS4uiAxMDAg55qE5pWw57uEXG4gICAgY29uc3QgYXJyID0gW10gYXMgc3RyaW5nW107XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gMTAwOyBpKyspIHtcbiAgICAgIGFyci5wdXNoKGdlbk51bVN0cihpKSk7XG4gICAgfVxuICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgYXJyYXk6IGFycixcbiAgICAgIGltZ1VybDogZ2VuSW1nVXJsKHRoaXMuZGF0YS5pbmRleCArIDEpLFxuICAgICAgbnVtc3RyOiBnZW5OdW1TdHIodGhpcy5kYXRhLmluZGV4ICsgMSksXG4gICAgICBudW10ZXh0OiBkaWN0W2FyclswXV1cbiAgICB9KTtcbiAgfSxcbiAgLy8g5LiL5LiA5Liq5pWw5a2XXG4gIG5leHQoKSB7XG4gICAgdGhpcy5kYXRhLmluZGV4Kys7XG4gICAgdGhpcy5kYXRhLnNlYXJjaEluZGV4Kys7XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBpbmRleDogdHJhbnNOdW0odGhpcy5kYXRhLmluZGV4KSxcbiAgICAgIGltZ1VybDogZ2VuSW1nVXJsKHRoaXMuZGF0YS5pbmRleCArIDEpLFxuICAgICAgbnVtc3RyOiBnZW5OdW1TdHIodGhpcy5kYXRhLmluZGV4ICsgMSksXG4gICAgICBudW10ZXh0OiBkaWN0W3RoaXMuZGF0YS5hcnJheVt0cmFuc051bSh0aGlzLmRhdGEuaW5kZXgpXV0sXG4gICAgICBzZWFyY2hJbmRleDogdHJhbnNOdW0odGhpcy5kYXRhLnNlYXJjaEluZGV4KSxcbiAgICB9KTtcbiAgfSxcbiAgLy8g5LiK5LiA5Liq5pWw5a2XXG4gIHByZXYoKSB7XG4gICAgdGhpcy5kYXRhLmluZGV4LS07XG4gICAgdGhpcy5kYXRhLnNlYXJjaEluZGV4LS07XG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBpbmRleDogdHJhbnNOdW0odGhpcy5kYXRhLmluZGV4KSxcbiAgICAgIGltZ1VybDogZ2VuSW1nVXJsKHRoaXMuZGF0YS5pbmRleCArIDEpLFxuICAgICAgbnVtc3RyOiBnZW5OdW1TdHIodGhpcy5kYXRhLmluZGV4ICsgMSksXG4gICAgICBudW10ZXh0OiBkaWN0W3RoaXMuZGF0YS5hcnJheVt0cmFuc051bSh0aGlzLmRhdGEuaW5kZXgpXV0sXG4gICAgICBzZWFyY2hJbmRleDogdHJhbnNOdW0odGhpcy5kYXRhLnNlYXJjaEluZGV4KSxcbiAgICB9KTtcbiAgfSxcbiAgYmluZFBpY2tlckNoYW5nZShlOiBhbnkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGUuZGV0YWlsLnZhbHVlKTtcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIGluZGV4OiB2YWx1ZSxcbiAgICAgIGltZ1VybDogZ2VuSW1nVXJsKHZhbHVlICsgMSksXG4gICAgICBudW1zdHI6IGdlbk51bVN0cih2YWx1ZSArIDEpLFxuICAgICAgbnVtdGV4dDogZGljdFt0aGlzLmRhdGEuYXJyYXlbdmFsdWVdXSxcbiAgICAgIHNlYXJjaEluZGV4OiB2YWx1ZSArIDEsXG4gICAgfSlcbiAgfSxcbiAgLy8g5p+l5om+XG4gIHNlYXJjaChlOiBhbnkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGUuZGV0YWlsLnZhbHVlID8gZS5kZXRhaWwudmFsdWUgOiAxKTtcbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIGluZGV4OiB0cmFuc051bSh2YWx1ZSAtIDEpLFxuICAgICAgaW1nVXJsOiBnZW5JbWdVcmwodmFsdWUpLFxuICAgICAgbnVtc3RyOiBnZW5OdW1TdHIodmFsdWUpLFxuICAgICAgbnVtdGV4dDogZGljdFt0aGlzLmRhdGEuYXJyYXlbdHJhbnNOdW0odmFsdWUgLSAxKV1dLFxuICAgICAgc2VhcmNoSW5kZXg6IHZhbHVlLFxuICAgIH0pXG4gIH1cbiAgLy/nlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWIneasoea4suafk+WujOaIkFxuICAvLyBvblJlYWR5KCkge1xuXG4gIC8vIH0sXG5cbiAgLy8g55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcbiAgLy8gb25TaG93KCkge1xuXG4gIC8vIH0sXG5cbiAgLy8g55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cbiAgLy8gb25IaWRlKCkge1xuXG4gIC8vIH0sXG5cbiAgLy8g55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLljbjovb1cbiAgLy8gb25VbmxvYWQoKSB7XG5cbiAgLy8gfSxcblxuICAvLyDpobXpnaLnm7jlhbPkuovku7blpITnkIblh73mlbAtLeebkeWQrOeUqOaIt+S4i+aLieWKqOS9nFxuICAvLyBvblB1bGxEb3duUmVmcmVzaCgpIHtcblxuICAvLyB9LFxuXG4gIC8vIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxuICAvLyBvblJlYWNoQm90dG9tKCkge1xuXG4gIC8vIH0sXG5cbiAgLy8g55So5oi354K55Ye75Y+z5LiK6KeS5YiG5LqrXG4gIC8vIG9uU2hhcmVBcHBNZXNzYWdlKCkge1xuXG4gIC8vIH1cbn0pIl19